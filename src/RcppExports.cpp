// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// find_analogs_core
SEXP find_analogs_core(SEXP focal_clim_, SEXP ref_clim_, SEXP focal_geo_, SEXP ref_geo_, SEXP mode_, SEXP k_, SEXP climate_band_, SEXP radius_km_, SEXP geo_flag_, SEXP compact_bins_);
RcppExport SEXP _analogs_find_analogs_core(SEXP focal_clim_SEXP, SEXP ref_clim_SEXP, SEXP focal_geo_SEXP, SEXP ref_geo_SEXP, SEXP mode_SEXP, SEXP k_SEXP, SEXP climate_band_SEXP, SEXP radius_km_SEXP, SEXP geo_flag_SEXP, SEXP compact_bins_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type focal_clim_(focal_clim_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ref_clim_(ref_clim_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type focal_geo_(focal_geo_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ref_geo_(ref_geo_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type mode_(mode_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type k_(k_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type climate_band_(climate_band_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type radius_km_(radius_km_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type geo_flag_(geo_flag_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type compact_bins_(compact_bins_SEXP);
    rcpp_result_gen = Rcpp::wrap(find_analogs_core(focal_clim_, ref_clim_, focal_geo_, ref_geo_, mode_, k_, climate_band_, radius_km_, geo_flag_, compact_bins_));
    return rcpp_result_gen;
END_RCPP
}
// analogs_euclid_cpp
double analogs_euclid_cpp(NumericVector a, NumericVector b);
RcppExport SEXP _analogs_analogs_euclid_cpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(analogs_euclid_cpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// analogs_haversine_cpp
double analogs_haversine_cpp(NumericVector lonlat_a, NumericVector lonlat_b);
RcppExport SEXP _analogs_analogs_haversine_cpp(SEXP lonlat_aSEXP, SEXP lonlat_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lonlat_a(lonlat_aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lonlat_b(lonlat_bSEXP);
    rcpp_result_gen = Rcpp::wrap(analogs_haversine_cpp(lonlat_a, lonlat_b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_analogs_find_analogs_core", (DL_FUNC) &_analogs_find_analogs_core, 10},
    {"_analogs_analogs_euclid_cpp", (DL_FUNC) &_analogs_analogs_euclid_cpp, 2},
    {"_analogs_analogs_haversine_cpp", (DL_FUNC) &_analogs_analogs_haversine_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_analogs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
